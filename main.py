import textwrap

from openai import OpenAI;
# Import the array from data.py;
from behavioral_questions import bq;
from coding_questions import cq;
from behavioral_qualifiers import bqReqCollection;

client = OpenAI(
    # This is the default and can be omitted
    api_key="",
)

def runBot(entry):
    # Open the file in read mode
    codingSolutions = [];
    BQSolutions = [];

    with open(f"{entry}.txt", "r") as file:
        # Read each line in the file
        for line in file:
            # Process or print each line
            #print(line.strip());  # .strip() removes any extra newline characters
            if line.startswith("coding"):
                #this is a coding solution file
                #print("this is coding");
                codingFilepath = f"{line.strip()}";
                codingSolution = readTextFile(codingFilepath);
                codingSolutions.append(codingSolution);
            elif line.startswith("behavioral"):
                #this is a BQ solution file
                #print("this is behavioral");
                BQFilepath = f"{line.strip()}";
                BQSolution = readTextFile(BQFilepath);
                BQSolutions.append(BQSolution);

    codingFeedback = evaluateCodingInterview(codingSolutions);
    BQFeedback = evaluateBQInterview(BQSolutions);
    overall = evaluateOverall(codingFeedback, BQFeedback);
    return overall;

# read candidate input (code or transcript for BQ)
def readTextFile(filepath):
    solution = "";
    try:
        #open the file and read
        with open(filepath, 'r') as file:
            solution = file.read();
    except FileNotFoundError:
        return f"Error: The file '{filepath}' was not found.";
    except Exception as e:
        return f"An error occurred: {str(e)}"
    return solution;

def evaluateCodingInterview(solutions):
    arr = [];
    for i in range(len(cq)):
        question = "This is an interview coding question for candidates:\n";
        question += cq[i] + "\n\n"

        solution = "This is the solution of an applicant. Please give me a brief feedback about his coding skill based on his solution.\n"
        solution += solutions[i];

        prompt = question + solution;
        #print(prompt)
        apiResult = client.chat.completions.create(
            messages=[
                {
                    "role": "user",
                    "content": prompt,
                }
            ],
            model="gpt-4o-mini",
        )
        fb = apiResult.choices[0].message.content;
        arr.append(fb);
    return arr;

def evaluateBQInterview(solutions):
    arr = [];
    requirements = "This is what I am looking for from an applicant:\n";
    for j in range(len(bqReqCollection)):
        requirements += bqReqCollection[j] + '\n\n';
    for i in range(len(bq)):
        question = "This is the interview behavioral question:\n" + bq[i] + "\n";
        solution = "This is the answer of an applicant. Is he a good fit for my company based on his answer?\n";
        solution += solutions[i];
        # openai api call
        prompt = requirements + question + solution;
        apiResult = client.chat.completions.create(
            messages=[
                {
                    "role": "user",
                    "content": prompt,
                }
            ],
            model="gpt-4o-mini",
        )
        fb = apiResult.choices[0].message.content;
        arr.append(fb);
        arr.append(solution);
    return arr;

def evaluateOverall(codingFeedback, BQFeedback):
    prompt = "Based on the following feedbacks generated by you, do you think I should hire the candidate as a new grad software engineer?\n";
    for i in range(len(codingFeedback)):
        prompt += codingFeedback[i] + '\n\n';
    for i in range(len(BQFeedback)):
        prompt += BQFeedback[i] + '\n\n';
    apiResult = client.chat.completions.create(
        messages=[
            {
                "role": "user",
                "content": prompt,
            }
        ],
        model="gpt-4o-mini",
    )
    fb = apiResult.choices[0].message.content;
    return fb;

# # evaluate coding performance
# codingFilepath = "coding_submission.txt";
# codingSolution = readTextFile(codingFilepath);
# codingFeedback = evaluateCodingInterview([codingSolution]);
# #print("coding feedback:", textwrap.fill(codingFeedback[0], width=88));
#
# # evaluate BQ performance
# BQFilepath = "behavioral_submission.txt";
# BQSolution = readTextFile(BQFilepath);
# BQFeedback = evaluateBQInterview([BQSolution]);
# #print("BQ feedback:", textwrap.fill(BQFeedback[0], width=88));
#
# # overall feedbacks
# overallFeedback = evaluateOverall(codingFeedback, BQFeedback);
# print("overallFeedback:\n", overallFeedback);

overallFeedback = runBot("entry");
print("overall feedback:\n", overallFeedback);