class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        set<pair<int, int>> memory;
        int m = grid.size(), n = grid[0].size(), ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (memory.find({i, j}) == memory.end() && grid[i][j] == '1') {
                    dfs(grid, memory, i, j, m, n);
                    ans++;
                }
            }
        }
        return ans;
    }

    void dfs(vector<vector<char>>& grid, set<pair<int, int>>& memory, int i, int j, int& m, int& n) {
        if (i > m - 1 || j > n - 1) {return;}
        if (grid[i][j] == '0') {return;}
        if (memory.find({i, j}) != memory.end()) {return;}
        memory.insert({i, j});
        dfs(grid, memory, i + 1, j, m, n); // right
        dfs(grid, memory, i, j + 1, m, n); // down
    }
};