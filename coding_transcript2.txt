this problem is straightforward. given a 2d matrix with only '1' or '0'. i will use DFS approach to solve this problem. basically, i run a nested for loop to go over every element in the 2d array. if an element is '1', then i will run DFS function on it and try to connect as many neighboring cells with value of '1' as possible. the DFS function will have a set to remember all the '1' element that has been visited already so that you will not run the DFS again on a land that already been counted for earlier. And obviously, we need to has a base case to make sure the index are not out of bound. And the rest of the logic is just trying to go to all 4 directions (neighbors). Once a '1' cell is visited, make sure it is stored in the visited set. The time complexity is probably O(n^2) because you have a nested for loop, space complexity is also O(n^2) because the worst case scenario you will need to store every single element in the set.